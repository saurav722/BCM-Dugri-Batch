using UnityEngine;
using UnityEngine.SceneManagement;
using TMPro;

public class BallMovement : MonoBehaviour
{
    // UI Elements
    public TextMeshProUGUI valueText; // For displaying collectibles count
    public TextMeshProUGUI healthText; // For displaying health remaining

    // Player stats
    private int value = 0;
    private int health = 2; // Initial health
    public int collectiblesCount = 0;

    // Movement settings
    public float speed = 10f;
    public float jumpForce = 5f; // Force for jumping
    private bool isGrounded; // Flag to check if the ball is grounded

    // Respawn and falling settings
    public Transform spawnPoint;
    public float fallThreshold = -10f;

    // Camera reference
    public Transform cameraTransform;

    // Scene management
    public string gameOverScene = "GameOver";

    // Rigidbody reference
    private Rigidbody rb;

    // Unity methods
    void Start()
    {
        rb = GetComponent<Rigidbody>();
        Respawn();
        UpdateUI();
    }

    void Update()
    {
        HandleMovement();
        HandleJump();
        CheckFall();
    }

    // Custom methods
    private void UpdateUI()
    {
        valueText.text = "Collectibles: " + collectiblesCount.ToString();
        healthText.text = "Lives: " + health.ToString();
    }

    private void HandleMovement()
    {
        float moveHorizontal = Input.GetAxis("Horizontal");
        float moveVertical = Input.GetAxis("Vertical");

        Vector3 cameraForward = cameraTransform.forward;
        Vector3 cameraRight = cameraTransform.right;

        cameraForward.y = 0;
        cameraRight.y = 0;

        cameraForward.Normalize();
        cameraRight.Normalize();

        Vector3 movement = (cameraForward * moveVertical + cameraRight * moveHorizontal).normalized;
        rb.AddForce(movement * speed);
    }

    private void HandleJump()
    {
        if (Input.GetKeyDown(KeyCode.Space) && isGrounded)
        {
            rb.AddForce(Vector3.up * jumpForce, ForceMode.Impulse);
        }
    }

    private void CheckFall()
    {
        if (transform.position.y < fallThreshold)
        {
            LoseLife();
        }
    }

    private void LoseLife()
    {
        health--;
        if (health > 0)
        {
            Respawn();
        }
        else
        {
            SceneManager.LoadScene(gameOverScene);
        }
        UpdateUI();
    }

    private void Respawn()
    {
        transform.position = spawnPoint.position;
        rb.velocity = Vector3.zero;
        rb.angularVelocity = Vector3.zero;
    }

    private void LoadNextLevel()
    {
        int currentSceneIndex = SceneManager.GetActiveScene().buildIndex;
        if (currentSceneIndex < SceneManager.sceneCountInBuildSettings - 1)
        {
            SceneManager.LoadScene(currentSceneIndex + 1);
        }
        else
        {
            Debug.Log("No more levels. Restarting the game or displaying end screen.");
            SceneManager.LoadScene(0); // Restart from the first level
        }
    }

    // Collision and trigger detection
    private void OnCollisionEnter(Collision collision)
    {
        if (collision.gameObject.name.Contains("Obs"))
        {
            LoseLife();
        }

        if (collision.gameObject.name.Contains("NextLevel"))
        {
            LoadNextLevel();
        }
    }

    private void OnTriggerEnter(Collider other)
    {
        if (other.gameObject.name.Contains("Coin"))
        {
            collectiblesCount++;
            Destroy(other.gameObject);
            Debug.Log("Collected an item! Total collected: " + collectiblesCount);
            UpdateUI();
        }
    }

    private void OnCollisionStay(Collision collision)
    {
        isGrounded = true; // Ball is on the ground
    }

    private void OnCollisionExit(Collision collision)
    {
        isGrounded = false; // Ball is no longer grounded
    }
}
